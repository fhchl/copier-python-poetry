# syntax=docker/dockerfile:1
# Keep this syntax directive! It's used to enable Docker BuildKit

# Dockerfile inspired by:
# https://github.com/orgs/python-poetry/discussions/1879
# https://github.com/orgs/python-poetry/discussions/1879#discussioncomment-216865
# https://github.com/orgs/python-poetry/discussions/1879#discussioncomment-7284113
# https://gist.github.com/usr-ein/c42d98abca3cb4632ab0c2c6aff8c88a

FROM python:{{ python_version }}-slim as python-base

ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    # pip
    PIP_DISABLE_PIP_VERSION_CHECK=on \
    PIP_DEFAULT_TIMEOUT=100 \
    \
    # Poetry
    # https://python-poetry.org/docs/configuration/#using-environment-variables
    POETRY_VERSION=1.8.3 \
    # make poetry install to this location
    POETRY_HOME="/opt/poetry" \
    # do not ask any interactive question
    POETRY_NO_INTERACTION=1 \
    # never create virtual environment automaticly, only use env prepared by us
    POETRY_VIRTUALENVS_CREATE=false \
    \
    # this is where our requirements + virtual environment will live
    VIRTUAL_ENV="/venv"

# prepend poetry and venv to path
ENV PATH="$POETRY_HOME/bin:$VIRTUAL_ENV/bin:$PATH"

# prepare virtual env
RUN python -m venv $VIRTUAL_ENV

# working directory and Python path
WORKDIR /work_dir
ENV PYTHONPATH="/work_dir:$PYTHONPATH"

FROM python-base as builder-base
# Example for PYTHON_REGISTRY_NAME Argument
# If you used:
# `poetry source add my_registry https://gitlab.mycompany.com/api/v4/projects/1234/packages/pypi/simple`
# PYTHON_REGISTRY_NAME=my_registry
ARG PYTHON_REGISTRY_NAME
ARG PYTHON_REGISTRY_USERNAME
ARG PYTHON_REGISTRY_PASSWORD

# Note: Passing credentials as build arguments is generally not secure.
# However, since these ARGs are defined in the `builder` stage
# and not used in the final image, it should be safe.
# This approach avoids the added complexity of using Docker secrets.

# Setup environment for HTTPS auth based on the arguments
RUN if [ -n "$PYTHON_REGISTRY_NAME" ] && [ -n "$PYTHON_REGISTRY_USERNAME" ] && [ -n "$PYTHON_REGISTRY_PASSWORD" ]; then \
        echo "Using provided registry credentials for $PYTHON_REGISTRY_NAME"; \
        poetry config http-basic.$PYTHON_REGISTRY_NAME $PYTHON_REGISTRY_USERNAME $PYTHON_REGISTRY_PASSWORD; \
    else \
        echo "Registry credentials or name not provided, skipping authentication setup"; \
    fi

RUN apt-get update \
    && apt-get install -y curl git build-essential

# install poetry - respects $POETRY_VERSION & $POETRY_HOME
# The --mount will mount the buildx cache directory to where
# Poetry and Pip store their cache so that they can re-use it
RUN --mount=type=cache,target=/root/.cache \
    pip install --no-cache-dir poetry==$POETRY_VERSION

# used to init dependencies
WORKDIR /work_dir
COPY poetry.lock pyproject.toml ./

RUN --mount=type=cache,target=/root/.cache \
    poetry install --no-root --only main

FROM python-base as production

# copy in our built poetry + venv
COPY --from=builder-base $POETRY_HOME $POETRY_HOME
COPY --from=builder-base $VIRTUAL_ENV $VIRTUAL_ENV

WORKDIR /work_dir

# copy in our source code last, as it changes the most
COPY pyproject.toml poetry.lock ./
COPY ./src ./src
RUN --mount=type=cache,target=/root/.cache \
    poetry install --only-root

CMD ["poetry", "run", "{{ package_name }}"]
